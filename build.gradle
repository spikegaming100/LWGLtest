import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.0'
    }
}

plugins {
    id("java")
    id("application")
    id 'edu.sc.seis.launch4j' version '3.0.4'
}

application {
    mainClassName = 'ru.spike.util.Launcher'
}
project.ext.lwjglVersion = "3.3.2"

version = "1.0" //Product version

dependencies {

    ["", "-glfw", "-assimp", "-bgfx", "-openal", "-opengl", "-stb", "-vulkan"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        if(it != "-vulkan")
            implementation "org.lwjgl:lwjgl$it:$lwjglVersion:natives-linux"
        if(it != "-vulkan")
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion:natives-macos"
        if(it != "-vulkan")
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion:natives-windows"
    }

}

jar {
    archiveFileName = project.name + "-" + project.version + "-extLib.jar"
    manifest {
        attributes(
                'Main-Class': project.mainClassName,
                'Class-Path': configurations.runtimeClasspath.collect { 'lib/' + it.getName() }.join(' ')
        )
    }
}

clean {
    delete "proguard/mapping.txt", "proguard/dictionary.txt"
}

tasks.register('buildExtLib', Copy) {
    dependsOn jar
    from configurations.runtimeClasspath
    into "${buildDir}/libs/lib/"
}

tasks.register('fatjar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = project.name + "-" + project.version + "-fat.jar"
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    archiveClassifier = "all"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

}

tasks.register('genDict') {
    delete "proguard/dictionary.txt"
    outputs.file('proguard/dictionary.txt')
    doLast {
        def r = new Random()
        def begin = r.nextInt(1000) + 0x010
        def end = begin + 0x40
        def chars = (begin..end)
                .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
                .collect { String.valueOf(Character.toChars(it)) }
        int max = chars.size()
        def start = []
        for (int i = 0; i < max; i++) {
            char c = chars.get(i).charAt(0)
            if (Character.isJavaIdentifierStart(c)) {
                start << String.valueOf(c)
            }
        }
        def f = outputs.files.getSingleFile()
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(start.join(System.lineSeparator()))
            it.write()
        }
    }
}

tasks.register('buildObr', ProGuardTask) {
    dependsOn buildExtLib, genDict
    configuration file('proguard/proguard.pro')
    injars(tasks.named('fatjar', Jar))
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    configurations.runtimeClasspath.files.each {
        libraryjars it
    }
    verbose
    outjars(layout.buildDirectory.file("${buildDir}/libs/" + project.name + "-" + project.version + "-" + "obf.jar"))
}

launch4j {
    outfile = project.name + "-" + project.version + ".exe"
    outputDir = "${buildDir}/libs/"
    mainClassName = project.mainClassName
    copyConfigurable = []
    icon = "${projectDir}/src/main/java/res/app.ico"
    version = project.version
    textVersion = project.version
    copyright = "Â© SpikeDevelopment"
    jreMinVersion = "8"
    jarTask = project.tasks.buildObr
}